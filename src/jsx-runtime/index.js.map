{"version":3,"file":"index.js","sources":["../app.js"],"sourcesContent":["const flatten = (arr) => arr.flatMap(item => Array.isArray(item) ? flatten(item) : item);\n\n/**\n * Transforms an element into a different representation.\n * @param {any} element - The element to be transformed.\n * @returns {Promise<any>|Text|any} - The transformed element.\n */\nasync function transformElement(element) {\n  // If the element is falsy, return undefined\n  if (!element) return;\n\n  // If the element is a Promise, wait for it to resolve and return the result\n  if (element instanceof Promise) {\n    return await element;\n  }\n\n  // If the element is a string or number, create a Text node with its string representation\n  if (typeof element === 'string' || typeof element === 'number') {\n    return document.createTextNode(element.toString());\n  }\n\n  // If the element is a function, invoke it and return the result\n  if (typeof element === 'function') {\n    return element();\n  }\n\n  // Otherwise, return the element as is\n  return element;\n}\n\n/**\n * Appends children to an element.\n * \n * @param {HTMLElement} element - The element to append children to.\n * @param {Array|HTMLElement} children - The children to append.\n * @returns {HTMLElement} - The element with the appended children.\n */\nconst appendChildren = async (element, children) => {\n  // Ensure children is an array\n  const flattenChildren = Array.isArray(children)\n    ? flatten(children)\n    : [children];\n\n  // Iterate over the children\n  for (const child of flattenChildren) {\n    // Only append if the child exists\n    if (child) {\n      // Transform the child element\n      const transformChild = await transformElement(child);\n      // Append the transformed child to the element\n      element.appendChild(transformChild);\n    }\n  }\n\n  return element;\n};\n\n// This function generates a JSX element based on the given tag and props.\n// It supports both HTML tag names and functional components as tags.\nconst jsx = (tag, { ref, children, ...props } = {}) => {\n  // If the tag is a string, create a new HTML element.\n  if (typeof tag === 'string') {\n    let element = document.createElement(tag);\n\n    // Iterate over the props and set attributes or properties on the element.\n    for (const [key, value] of Object.entries(props)) {\n      if (value) {\n        // If the prop value is a function, assign it as a property on the element.\n        // Otherwise, set the attribute with the prop value.\n        typeof value === 'function' ? element[key] = value : element.setAttribute(key, value);\n      }\n    }\n\n    // If children are provided, append them to the element.\n    if (children) {\n      element = appendChildren(element, children);\n    }\n\n    // If a ref is provided, either assign it as a property on the element\n    // or set the 'ref' attribute with the ref value.\n    if (ref) {\n      typeof ref === 'function' ? ref(element) : element.setAttribute('ref', ref);\n    }\n\n    // Return the generated element.\n    return element;\n  }\n\n  // If the tag is a function, invoke it with the given props and return the result.\n  if (typeof tag === 'function') {\n    return tag({ ref, children, ...props });\n  }\n\n  // Throw an error if the tag type is invalid.\n  throw new Error(`Invalid tag type: ${tag}`);\n};\n\nconst Fragment = ({ children }) => appendChildren(document.createDocumentFragment(), children);\n\n/**\n * Render the transformed element to the specified selector or to the document body.\n * @param {Element} element - The element to render.\n * @param {string} [selector] - Optional selector to specify the parent element.\n */\nconst render = async (element, selector) => {\n    // If element is falsy, return early\n    if (!element) return;\n\n    // Transform the element asynchronously\n    const transformedElement = await transformElement(element);\n\n    // Specify the parent element as the document body if no selector is provided\n    const parentElement = selector ? selector : document.body;\n\n    // Append the transformed element to the parent element\n    parentElement.appendChild(transformedElement);\n};\n\nconst jsxs = jsx;\n\nexport { jsx, jsxs, Fragment, render};"],"names":["flatten","arr","flatMap","item","Array","isArray","transformElement","_x","_transformElement","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","element","wrap","_callee3$","_context3","prev","next","abrupt","Promise","sent","document","createTextNode","toString","stop","appendChildren","_ref","_callee","children","flattenChildren","_iterator","_step","child","transformChild","_callee$","_context","_createForOfIteratorHelper","s","n","done","value","appendChild","t0","e","f","finish","_x2","_x3","jsx","tag","_ref2","length","undefined","ref","props","_objectWithoutProperties","_excluded","createElement","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","key","setAttribute","_objectSpread","Error","concat","Fragment","_ref3","createDocumentFragment","render","_ref4","_callee2","selector","transformedElement","parentElement","_callee2$","_context2","body","_x4","_x5","jsxs"],"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"}